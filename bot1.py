"""
Telegram bot `bot1.py` ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤.

–§—É–Ω–∫—Ü–∏–∏:
1. –°–∏—Å—Ç–µ–º–Ω—ã–π "–ø—Ä–µ–ø—Ä–æ–º–ø—Ç" –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —Ç—Ä–µ–≤–æ–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç.
2. –•—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–∞–º—è—Ç—å) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã.
3. –ö–æ–º–∞–Ω–¥–∞ /clear –æ—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- python-telegram-bot >=22
- openai >=1.14  (SDK –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è DeepSeek)
- python-dotenv

–ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú: —Å–æ–∑–¥–∞–π—Ç–µ .env —Å TELEGRAM_TOKEN –∏ DEEPSEEK_API_KEY
"""

import os
import logging
from typing import List, Dict
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from openai import OpenAI

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek (—á–µ—Ä–µ–∑ OpenAI SDK)
client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com",
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# –ü–∞–º—è—Ç—å ‚Äî —Å–ª–æ–≤–∞—Ä—å {user_id: List[Dict[str, str]]}
USER_MEMORY: Dict[int, List[Dict[str, str]]] = {}
MAX_MEMORY_MESSAGES = 12  # –¥–æ 6 —Ä–µ–ø–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ 6 –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞

SYSTEM_PROMPT = (
    "You are an anxious therapy client named Alex. "
    "Respond with the thoughts and feelings of someone who is worried, overthinking, and seeking reassurance. "
    "Do not give psychological advice; instead, stay in the client role so that trainee psychologists can practice."
)

def get_memory(user_id: int) -> List[Dict[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return USER_MEMORY.setdefault(user_id, [])

def append_memory(user_id: int, role: str, content: str) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–∞–º—è—Ç–∏, –æ–±—Ä–µ–∑–∞—è —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    mem = get_memory(user_id)
    mem.append({"role": role, "content": content})
    # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–∞–º—è—Ç–∏
    if len(mem) > MAX_MEMORY_MESSAGES:
        del mem[0 : len(mem) - MAX_MEMORY_MESSAGES]

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–µ–∫—Å ‚Äî –Ω–µ–º–Ω–æ–≥–æ —Ç—Ä–µ–≤–æ–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π.\n"
        "–ß—Ç–æ–±—ã —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /clear."
    )

async def clear_memory(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    USER_MEMORY.pop(update.effective_user.id, None)
    await update.message.reply_text("üóëÔ∏è –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞.")

async def chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    append_memory(user_id, "user", user_text)

    # 2. –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    messages.extend(get_memory(user_id))

    # 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    try:
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages,
        )
    except Exception as e:
        logging.exception("DeepSeek API error")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    bot_reply = response.choices[0].message.content.strip()

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ø–∞–º—è—Ç—å
    append_memory(user_id, "assistant", bot_reply)

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(bot_reply)


def main() -> None:
    if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
        raise RuntimeError("TELEGRAM_TOKEN –∏–ª–∏ DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("clear", clear_memory))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    logging.info("Bot is running‚Ä¶ (press Ctrl+C to stop)")
    app.run_polling()


if __name__ == "__main__":
    main()
