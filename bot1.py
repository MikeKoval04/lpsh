import os
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes,
)
from openai import OpenAI

# 1) –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# 2) –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º "–∫–ª–∏–µ–Ω—Ç–∞" DeepSeek
client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com",
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤
os.makedirs("chats", exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
user_histories = {}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é
def get_reply_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON
def save_message_to_json(chat_id: int, role: str, content: str):
    try:
        filename = f"chats/chat_{chat_id}.json"
        message_data = {
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        if os.path.exists(filename):
            with open(filename, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {"chat_id": chat_id, "messages": []}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data["messages"].append(message_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ JSON
def load_chat_history(chat_id: int) -> dict:
    filename = f"chats/chat_{chat_id}.json"
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"chat_id": chat_id, "messages": []}

# 3) /start —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–æ—Ç–∞ –∏ —Å–æ–≥–ª–∞—Å–∏–µ–º
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è
    bot_description = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∞!*\n\n"
        "ü§ñ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞:*\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–∏–º–ø—Ç–æ–º–∞–º–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏. "
        "–û–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª–µ–π - –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤, "
        "—Ç–µ—Ö–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.\n\n"
        "üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ–≥–ª–∞—Å–∏–µ:*\n"
        "1. –í–µ—Å—å –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞\n"
        "2. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞\n"
        "3. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —É—á–µ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ [—Å—Å—ã–ª–∫–µ](https://disk.yandex.ru/d/Ow77Ht28TDstzg)\n\n"
        "‚úÖ *–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É \"–Ø —Å–æ–≥–ª–∞—Å–µ–Ω\" –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ:*\n"
        "- –ü–æ–Ω–∏–º–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –ø—Ä–∏—Ä–æ–¥—ã –±–æ—Ç–∞\n"
        "- –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞\n"
        "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
    consent_keyboard = ReplyKeyboardMarkup(
        [["‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await update.message.reply_text(
        bot_description,
        parse_mode="Markdown",
        reply_markup=consent_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è
async def consent(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_histories[chat_id] = {
        "system": (
            "–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å, "
            "–ø–æ—Ç–µ—Ä—é –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∂–∏–∑–Ω–∏ –∏ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ "
            "–∞–ø–∞—Ç–∏–∏ –∏ –ø–µ—Å—Å–∏–º–∏–∑–º–∞, –Ω–æ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é. "
            "–ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç–æ–≤, –∞ –æ–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. "
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–æ–≤–µ—Ä–∏—è."
        ),
        "history": []
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    save_message_to_json(chat_id, "system", user_histories[chat_id]["system"])
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é.\n\n"
        "–ü—Ä–∏–≤–µ—Ç... –ò–∑–≤–∏–Ω–∏, —á—Ç–æ —Ç–∞–∫ –≤—è–ª–æ, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —Å–∏–ª –¥–∞–∂–µ –≥–æ–≤–æ—Ä–∏—Ç—å. "
        "–ù–∞–≤–µ—Ä–Ω–æ–µ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å...",
        reply_markup=get_reply_keyboard()
    )

# 4) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
def summarize_messages(messages: list) -> str:
    """–û–±–æ–±—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ DeepSeek"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç
        history_text = "\n".join(
            f"{msg['role']}: {msg['content']}" 
            for msg in messages
        )
        
        if not history_text.strip():
            return "–ù–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è
        prompt = (
            "–ö—Ä–∞—Ç–∫–æ –æ–±–æ–±—â–∏ —Å–ª–µ–¥—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏, "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. "
            "–û–±–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è:\n\n" +
            history_text
        )

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=300,
        )
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–±—â–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–±—â–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"

# 5) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
async def clear_history(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_histories[chat_id] = {
        "system": (
            "–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–µ–ø—Ä–µ—Å—Å–∏–µ–π. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å, "
            "–ø–æ—Ç–µ—Ä—é –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∂–∏–∑–Ω–∏ –∏ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ "
            "–∞–ø–∞—Ç–∏–∏ –∏ –ø–µ—Å—Å–∏–º–∏–∑–º–∞, –Ω–æ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –æ—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
        ),
        "history": []
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏
    save_message_to_json(chat_id, "system", "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")
    
    await update.message.reply_text(
        "üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.\n\n"
        "–°–Ω–æ–≤–∞ –Ω–∞—á–∏–Ω–∞—Ç—å... –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –Ω–æ –ª–∞–¥–Ω–æ...",
        reply_markup=get_reply_keyboard()
    )

# 6) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async def get_feedback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await ctx.bot.send_chat_action(
        chat_id=chat_id, 
        action="typing"
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    chat_history = load_chat_history(chat_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    formatted_history = "\n\n".join(
        f"{'üë§ –ü—Å–∏—Ö–æ–ª–æ–≥' if msg['role'] == 'user' else 'ü§ñ –ö–ª–∏–µ–Ω—Ç'}: {msg['content']}"
        for msg in chat_history["messages"]
    )
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_prompt = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —É—á–µ–±–Ω—É—é —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é, "
        "–≥–¥–µ –ø—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.\n\n"
        "–î–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞—Å–ø–µ–∫—Ç–∞–º:\n"
        "1. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n"
        "2. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏–∫–æ–π\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª—å—è–Ω—Å–∞\n"
        "4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è\n"
        "5. –†–∞–±–æ—Ç–∞ —Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º –∏ –∞–ø–∞—Ç–∏–µ–π –∫–ª–∏–µ–Ω—Ç–∞\n"
        "6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏–∫\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "- –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–µ—Å—Å–∏–∏\n"
        "- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–±–æ—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n"
        "- –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n"
        "- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏:\n\n{formatted_history}"
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç DeepSeek
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏."},
                {"role": "user", "content": feedback_prompt},
            ],
            max_tokens=3000,
        )
        feedback = response.choices[0].message.content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        save_message_to_json(chat_id, "user", "–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        save_message_to_json(chat_id, "assistant", feedback)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        await update.message.reply_text(
            feedback,
            reply_markup=get_reply_keyboard()
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
            reply_markup=get_reply_keyboard()
        )

# 7) —á–∞—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_message = update.message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ
    if user_message == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω":
        await consent(update, ctx)
        return
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"
    if user_message == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å":
        await clear_history(update, ctx)
        return
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
    if user_message == "üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        await get_feedback(update, ctx)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–µ
    if chat_id not in user_histories:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_message_to_json(chat_id, "user", user_message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await ctx.bot.send_chat_action(
        chat_id=chat_id, 
        action="typing"
    )
    
    history_data = user_histories[chat_id]
    system_message = history_data["system"]
    history = history_data["history"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history.append({"role": "user", "content": user_message})
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    full_history = [{"role": "system", "content": system_message}]
    
    # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±–æ–±—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(history) > 6:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π (3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + 3 –±–æ—Ç–∞)
        # –†–∞–∑–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é: —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        to_summarize = history[:-5]
        last_messages = history[-5:]
        
        # –û–±–æ–±—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é
        summary = summarize_messages(to_summarize)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–±–æ–±—â–µ–Ω–∏—è
        if "–û–±–æ–±—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:" in system_message:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±–æ–±—â–µ–Ω–∏–µ
            system_message = system_message.split("\n\n–û–±–æ–±—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")[0]
        
        system_message += f"\n\n–û–±–æ–±—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {summary}"
        history_data["system"] = system_message
        history = last_messages
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
    full_history.extend(history)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
    try:
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=full_history,
            max_tokens=2000,
        )
        assistant_reply = response.choices[0].message.content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "assistant", "content": assistant_reply})
        history_data["history"] = history
        user_histories[chat_id] = history_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        save_message_to_json(chat_id, "assistant", assistant_reply)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            assistant_reply,
            reply_markup=get_reply_keyboard()
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_reply_keyboard()
        )

# 8) ¬´–°–æ–±–∏—Ä–∞–µ–º¬ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º long-polling
def main() -> None:
    app = (ApplicationBuilder()
           .token(TELEGRAM_TOKEN)
           .build())

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("clear", clear_history))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    app.run_polling()  # —Å–ª—É—à–∞–µ–º Telegram

if __name__ == "__main__":
    main()