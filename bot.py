import os, logging
from dotenv import load_dotenv               
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes,
)
from openai import OpenAI                    

# 1) –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# 2) –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º "–∫–ª–∏–µ–Ω—Ç–∞" DeepSeek
client = OpenAI(
    api_key = DEEPSEEK_API_KEY,
    base_url = "https://api.deepseek.com", 
)

logging.basicConfig(level=logging.INFO)       # —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

# 3) /start
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å üôÇ")

# 4) —á–∞—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user",   "content": question},
        ],
    )
    await update.message.reply_text(response.choices[0].message.content)

# 5) ¬´–°–æ–±–∏—Ä–∞–µ–º¬ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º long-polling
def main() -> None:
    app = (ApplicationBuilder()               
           .token(TELEGRAM_TOKEN)
           .build())

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    app.run_polling()                         # —Å–ª—É—à–∞–µ–º Telegram

if __name__ == "__main__":
    main()
